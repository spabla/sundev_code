{\rtf1\ansi\deff0\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\fnil\fprq0\fcharset0 Calibri{\*\falt sans-serif};}{\f4\fswiss\fprq2\fcharset128 Arial;}{\f5\fnil\fprq0\fcharset128 OpenSymbol{\*\falt Arial Unicode MS};}{\f6\fmodern\fprq1\fcharset0 Courier New;}{\f7\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f8\fnil\fprq2\fcharset0 Arial;}{\f9\fswiss\fprq0\fcharset128 Arial;}}
{\colortbl;\red0\green0\blue0;\red34\green34\blue34;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057 Default;}
{\*\cs15\snext15\hich\af5\dbch\af5\loch\f5 Bullets;}
{\s16\sbasedon0\snext17\sb240\sa120\keepn\hich\af7\dbch\af8\afs28\loch\f2\fs28 Heading;}
{\s17\sbasedon0\snext17\sb0\sa120 Text body;}
{\s18\sbasedon17\snext18\sb0\sa120\dbch\af9 List;}
{\s19\sbasedon0\snext19\sb120\sa120\noline\i\dbch\af9\afs24\ai\fs24 Caption;}
{\s20\sbasedon0\snext20\noline\dbch\af9 Index;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f5\dbch\af5\fi-360\li3600}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\info{\author Sundev Pabla}{\creatim\yr2018\mo4\dy29\hr18\min44}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment OpenOffice}{\vern4110}}\deftab709

{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default;}}
\formshade\paperh16838\paperw11906\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\qc\widctlpar\li0\ri0\lin0\rin0\fi0{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ul\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
Improvements for a system translating significant quantities of morse code data to text}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\qc\widctlpar\li0\ri0\lin0\rin0\fi0{\ul\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar\li0\ri0\lin0\rin0\fi0{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
Consideration to scalability issues has already been given in the design of the solution.  For example the designed solution is implemented as follows:}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar\li0\ri0\lin0\rin0\fi0{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
The file is read one line at a time.  The line is encoded or decoded and written to the output file prior to another line being read.  It would have been possible to read the entire file into a buffer in one go, however this was considered bad design because large files could have caused memory issues on systems with limited stack space.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
The solution does not use std::map for storing letters and their morse string equivalents.  Performing a lookup in a map would have been a simpler solution.  However a map is sorted alphabetically and this would have meant that full advantage of morse codes efficiency is not being taken.  In morse code the most frequently occurring letter has the simplest morse string (ie. Dot). It therefore makes sense to sort letters in order of frequency as any lookup will be more efficient.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
The solution does not have a gui interface which requires a user to sit there selecting files to encode or decode.  The solution is designed for batch processing. An example batch file is provided.  Splitting the files needing to be encoded / decoded across a number of batch files would allow advantage to be taken of multiple cores available on modern PCs.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057{\listtext\pard\plain \hich\af5\dbch\af5\loch\f5 \'95\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
The solution uses the \u8220\'1cStrategy\u8221\'1d Design Pattern.  This design pattern encapsulates a family of algorithms and makes them interchangeable.  This was done with one eye on the fact that faster or better algorithms for doing the encode / decode may be needed in the future.  For example the designed solution consists of a FileEncodeDecode class which on construction is passed an EncodeDecodeAlgorithm.  This algorithm could be for converting morse to text and in future could be replaced with a faster algorithm for doing the same thing.  The design has encapsulated what might vary (the algorithm) from what is likely to stay the same (you will always need to open a file, read from it, modify the content, write out the modified content).  The FileEncodeDecode class is also programmed to target an interface (One which takes a string and returns a string), it is only aware of the abstact EncodeDecodeAlgorithm class and has no knowledge of the specific concrete class it has been passed for doing the encode / decode.  The class could be passed an algorithm for converting to Chinese and it would have no issues provided the class passed in conformed to the defined interface.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
Going forwards if the solution did not provide the required performance then analysis could be done to find the bottlenecks in the code or identify code that is frequently being run.  Optimisation of the code could then focus on the areas which give the biggest benefit.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
In addition to code optimisation, consideration may be given to how the input and output data is stored.  For example the space between dots and dashes of the same character could be removed, the space between characters and words could be reduced.  This would make the files smaller and quicker to parse and create.}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\ulnone\ulc0\afs24\rtlch \ltrch\loch\fs24\loch\f4
}
\par \pard\plain \s0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\hich\af10\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang2057\ql\widctlpar{\scaps0\caps0\cf2\expnd0\expndtw0\i0\ulnone\ulc0\b0\afs24\rtlch \ltrch\loch\fs24\loch\f4
\tab }
\par }